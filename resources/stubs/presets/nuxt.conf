# Managed by cast
# Generated: {{generation-time}}

proxy_cache_path /data/nginx/cache levels=1:2 keys_zone=nuxt-cache:25m max_size=1g inactive=60m use_temp_path=off;

map $sent_http_content_type $expires {
    "text/html" 1h;
    "text/html; charset=utf-8" 1h;
    default 7d;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name {{site-domain}};
    set $base {{server-path}}/{{site-path}};
    root $base/{{site-public-path}};

    # SSL
    ssl_certificate {{site-crt-path}};
    ssl_certificate_key {{site-key-path}};
    ssl_trusted_certificate {{site-pem-path}};

    # security
    include cast/security.conf;

    # logging
    access_log /var/log/nginx/{{site-domain}}.access.log;
    error_log /var/log/nginx/{{site-domain}}.error.log warn;

    include cast/general.conf;

    location / {
        expires $expires;

        # for generateSubFolders: true
        try_files $uri $uri/index.html @proxy;
        # for generateSubfolders: false
        # try_files $uri $uri.html @proxy;
    }

    # nuxt reverse proxy
    location @proxy {
        expires $expires;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;
        proxy_read_timeout 1m;
        proxy_connect_timeout 1m;
        proxy_pass {{site-proxy-url}};
        proxy_cache nuxt-cache;
        proxy_cache_bypass $arg_nocache;
        proxy_cache_valid 200 302 60m;
        proxy_cache_valid 404 1m;
        proxy_cache_lock on;
        proxy_cache_use_stale error timeout http_500 http_502 http_503 http_504;
        proxy_cache_key $uri$is_args$args;
    }
}

# HTTP redirect
server {
    listen 80;
    listen [::]:80;
    server_name .{{site-domain}};
    include cast/letsencrypt.conf;

    location / {
        return 301 https://{{site-domain}}$request_uri;
    }
}
